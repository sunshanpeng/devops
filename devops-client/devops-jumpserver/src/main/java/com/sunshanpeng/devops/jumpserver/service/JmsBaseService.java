package com.sunshanpeng.devops.jumpserver.service;import com.alibaba.fastjson.JSON;import com.alibaba.fastjson.JSONObject;import com.sunshanpeng.devops.jumpserver.base.ApiConstants;import com.sunshanpeng.devops.jumpserver.base.ApiType;import com.sunshanpeng.devops.jumpserver.base.JmsException;import com.sunshanpeng.devops.jumpserver.request.JmsRequest;import org.apache.commons.lang.StringUtils;import java.util.HashMap;import java.util.Map;public class JmsBaseService {    public String URL;    public String USERNAME;    public String PASSWORD;    public String TOKEN;    public JmsBaseService(String url, String username, String password) {        this.URL = url;        this.USERNAME = username;        this.PASSWORD = password;        getToken();    }    public JmsBaseService(String url, String token) {        this.URL = url;        this.TOKEN = "token "+ token;    }    public JmsBaseService() {    }    public JmsAssetsService jmsAssetsService() {        return new JmsAssetsService(this.URL, this.TOKEN);    }    public JmsLunaService jmsLunaService() {        return new JmsLunaService(this.URL, this.TOKEN);    }    public JmsPermissionService jmsPermissionService() {        return new JmsPermissionService(this.URL, this.TOKEN);    }    public JmsUsersService jmsUsersService() {        return new JmsUsersService(this.URL, this.TOKEN);    }    public String getToken() {        if (StringUtils.isNotBlank(this.TOKEN)) {            return this.TOKEN;        }        JSONObject jsonObject = new JSONObject();        jsonObject.put("username", USERNAME);        jsonObject.put("password", PASSWORD);        try {            Map<String, String> map = JmsRequest.getRequest(URL + ApiConstants.TOKEN, jsonObject.toString(), ApiType.API_POST, null);            String token = "Bearer " + JSON.parseObject(map.get("resultStr")).getString("token");            this.TOKEN = token;            return token;        } catch (Exception e) {            e.printStackTrace();        }        return null;    }    public Map<String, String> add(Object object, String apiUrl) {        try {            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl, jsonStr, ApiType.API_POST, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> updatePut(Object object, String apiUrl) {        try {            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl, jsonStr, ApiType.API_PUT, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> updateX(Object object, String apiUrl, String id) {        try {            String jsonStr = JSON.toJSONString(object);            JSONObject jsonObject = JSON.parseObject(jsonStr);            jsonObject.remove("id");            jsonStr = jsonObject.toString();            apiUrl = apiUrl.replaceAll("\\{" + "id" + "\\}", id);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl, jsonStr, ApiType.API_PATCH, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> update(Object object, String apiUrl, String id) {        try {            if (StringUtils.isBlank(id)) {                throw new JmsException("请填写ID信息");            }            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl + id + "/", jsonStr, ApiType.API_PATCH, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> delete(Object object, String apiUrl, String id) {        try {            if (StringUtils.isBlank(id)) {                throw new JmsException("请填写ID信息");            }            String jsonStr = JSON.toJSONString(object);            Map<String, String> map = JmsRequest.getRequest(this.URL + apiUrl + id + "/", jsonStr, ApiType.API_DELETE, this.TOKEN);            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> query(String id, String apiUrl) {        try {            Map<String, String> map = new HashMap<>();            if (StringUtils.isNotBlank(id)) {                map = JmsRequest.getRequest(this.URL + apiUrl + id + "/", null, ApiType.API_GET, this.TOKEN);            } else {                map = JmsRequest.getRequest(this.URL + apiUrl, null, ApiType.API_GET, this.TOKEN);            }            return map;        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }    public Map<String, String> queryAssetByIp(String ip, String apiUrl) {        try {            if (StringUtils.isBlank(ip)) {                throw new JmsException("请填写IP信息");            }            return JmsRequest.getRequest(this.URL + apiUrl +"?ip="+ ip , null, ApiType.API_GET, this.TOKEN);        } catch (Exception e) {            e.printStackTrace();            throw new JmsException(e.getMessage());        }    }}